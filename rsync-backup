#!/bin/sh

# == LICENSE =====================================================#
# backup multiple files and directories in time-stamped directories
# Copyright (C) 2013  go2null
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# == FUNCTIONS =================================================== #
printHelp() {
printf %s "
VERSION: 2010-10-02 : 0.8.1 : go2null
LICENSE: 
USAGE: $(basename -- "$0") -d DIRECTORY -k NUMBER -K NUMBER -s NUMBER -S NUMBER -o -f FILE
OPTIONS:
  -f FILE      - config file. Can be specified multiple times in order of increasing priority.
  -d DIRECTORY - directory to backup to.
  -k NUMBER    - minimum backups to keep. Default is 1.
  -K NUMBER    - maximum backups to keep.
  -s NUMBER    - minimum free space to reserve, in MB.
  -S NUMBER    - minimum free space to reserve, as %.
  -o           - by default, -k is overridden when -s or -S is met.
                 This option disables this behaviour. Impact is that the backup is not done if -s or S is met.
  -h           - Display this help.
DESCRIPTION:
* Creates 'YYYY-MM-DD-HHMMSS' directories in BAK_DIR.
* Creates a 'latest' symlink, pointing to the backup made.
* Creates a 'previous' symlink, allow other backup scripts to use a 'rsync --link-dest'.
* Example '.conf' file.
BAK_DIR='/var/backups'
## Num backups to keep
BAK_KEEP_MIN=7
BAK_KEEP_MAX=31
BAK_SPACE_MB_MIN=1000
BAK_SPACE_PC_MIN=5
## Override KEEP_MIN if free space falls below MIN_KB or MIN_%
BAK_MIN_OVERRIDE=1
## path of directories and files to backup
##   directories must end with '/'
BAK_1=\"\$HOME/\"
BAK_2='/etc/apache2/ports.conf'
BAK_3='/etc/apache2/ssl'
PTN_3=\"--exclude='*.key' --include'*/' --exclude='*'\"
RELEASE NOTES: https://github.com/go2null/rsync-backup/blob/master/README.md
"
}

getFreeSpace() {
	BAK_SPACE_MB=$(df -Pk "$BAK_DIR" | awk '!/Filesystem/ {print int($4/1024)}')
	BAK_SPACE_PC=$(df -Pk "$BAK_DIR" | awk '!/Filesystem/ {print 100-$5}')
}

pruneIfSpaceLow() {
	getFreeSpace
	echo "INFO: Free space $1          $BAK_SPACE_PC % / $BAK_SPACE_MB MB"

	# set IFS to newline, required for 'for' loops to parse DIR with space in names correctly
	IFS_PREV=$IFS
	IFS="
	"
	while [ "$BAK_SPACE_MB" -lt "$BAK_SPACE_MIN_MB" ] || [ "$BAK_SPACE_PC" -lt "$BAK_SPACE_MIN_PC" ]; do
		if [ "$1" = "after: " ]; then
			echo 'WARNING: Free space on backup volume below minimums'
			break
		elif [ $BAK_MIN_OVERRIDE -eq 1 -a $BAK_CNT -gt 0 ] || [ "$BAK_CNT" -ge "$BAK_KEEP_MIN" ]; then
			# remove oldest, using 'for' as quick way to get DIR
			for DIR in $(find "$BAK_DIR" -mindepth 1 -maxdepth 1 -type d -regextype sed -regex '.*/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{6\}' | sort -r); do
				echo "INFO: Deleting to free up space: $DIR"
				rm -rf "$DIR"
				# just do 1st DIR in list (which is oldest as 'sort -r')
				break
			done
		else
			echo "INFO: Free space available:       $BAK_SPACE_PC % / $BAK_SPACE_MB MB"
			echo 'ERROR: Not enough free space on backup volume'
			exit 1
		fi
		: $((BAK_CNT-=1))
		getFreeSpace
	done
	# reset IFS
	IFS=$IFS_PREV
}

# == DEFAULT SETTINGS =============================================== #
# Num backups to keep
BAK_KEEP_MIN=1
BAK_KEEP_MAX=999999999
# Override KEEP_MIN if free space falls below MIN_KB or MIN_%
BAK_MIN_OVERRIDE=1
# Required to be set by pruneIfSpaceLow
BAK_SPACE_MIN_MB=0
BAK_SPACE_MIN_PC=0

# == INPUT PARAMETERS =============================================== #
# get
while [ $# -gt 0 ]; do
	case "$1" in
		-f) { . "$2"; }            ;;
		-d) BAK_DIR=$2             ;;
		-k) BAK_KEEP_MIN=$2        ;;
		-K) BAK_KEEP_MAX=$2        ;;
		-s) BAK_SPACE_MIN_MB=$2    ;;
		-S) BAK_SPACE_MIN_PC=$2    ;;
		-o) unset BAK_MIN_OVERRIDE ;;
		-h) { printHelp; exit; }   ;;
	esac
	shift
done

# == HEADER ==== ================================================= #
echo "INFO: Backup start time:          $(date +%Y-%m-%d\ %H:%M:%S)"
echo "INFO: Backup destination:         $BAK_DIR"

# == VALIDATIONS ================================================= #
if [ -z "$BAK_DIR" ] || { ! mkdir -p "$BAK_DIR"; } 2>/dev/null; then
	{ echo "ERROR: Invalid backup directory '$BAK_DIR'. Exiting."; 
	  exit 1; 
	} >&2
fi
# if 'latest' is not a symlink, then it may be a file or dir, and so may have user data
if [ -e "$BAK_DIR/latest" ] && [ ! -L "$BAK_DIR/latest" ]; then
	{ echo "ERROR: '$BAK_DIR/latest' should be a symlink to the last backup.";
	  exit 1; 
	} >&2
fi

# == PRUNE OLD BACKUPS =========================================== #
# set IFS to newline, required for 'for' loops to parse DIR with space in names correctly
IFS_PREV=$IFS
IFS="
"
# prune (old) backups -gt BAK_KEEP_MAX
BAK_CNT=$(   find "$BAK_DIR" -mindepth 1 -maxdepth 1 -type d -regextype sed -regex '.*/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{6\}' | wc -l)
echo "INFO: # backups, min/current/max: $BAK_KEEP_MIN / $BAK_CNT / $BAK_KEEP_MAX"
for DIR in $(find "$BAK_DIR" -mindepth 1 -maxdepth 1 -type d -regextype sed -regex '.*/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}-[0-9]\{6\}' | sort -r); do
	if [ "$BAK_CNT" -ge "$BAK_KEEP_MAX" ]; then
		echo "INFO: Pruning old backup #$BAK_CNT: $DIR"
		rm -rf "$DIR"
	else
		break
	fi
	: $((BAK_CNT-=1))
done
# reset IFS
IFS=$IFS_PREV

# prune (old) backups IF free space is low
echo "INFO: Override min backups:       $BAK_MIN_OVERRIDE"
echo "INFO: Free space minimums:        $BAK_SPACE_MIN_PC % / $BAK_SPACE_MIN_MB MB"
pruneIfSpaceLow 'before:'

# == CREATE DIRECTORY FOR CURRENT BACKUP ========================= #
TIME_STAMP=$(date +%Y-%m-%d-%H%M%S)
BAK_DEST_CURR=$BAK_DIR/$TIME_STAMP
mkdir "$BAK_DEST_CURR" || { echo "ERROR: Cannot write to backup dir '$BAK_DIR'."; exit 1; }

# == MAIN BACKUP ROUTINE ========================================= #
COUNTER=1
while true; do
        eval "BAK_SRCE_PATH=\$BAK_$COUNTER"
        eval "PTN=\$PTN_$COUNTER"
        # stop on 1st blank source
        if [ -z "$BAK_SRCE_PATH" ]; then
                break
        else
                echo && echo "INFO: Backing up $BAK_SRCE_PATH"
                # ignore missing sources 
                if [ -e "$BAK_SRCE_PATH" ]; then
                        # added "/" before $BAK_SRCE_PATH to allow for relative source paths
                        #      the "//" in the result is handled correctly by mkdir, ln and rsync
                        BAK_DEST_PATH="$BAK_DEST_CURR/$BAK_SRCE_PATH"
                        BAK_LINK_PATH="$BAK_DIR/latest/$BAK_SRCE_PATH"

                        # rsync does not create parent directories, only final target directory.
                        #      creating parent directory as the target may be a file.
                        BAK_DEST_PARENT=$(dirname -- "$BAK_DEST_PATH")
                        [ -e "$BAK_DEST_PARENT" ] || mkdir -p "$BAK_DEST_PARENT"

                        if [ -d "$BAK_DEST_PARENT" ]; then
							# rsync doesn't sync single files with --link-dest option
							#      http://stackoverflow.com/questions/7100900/rsync-link-dest-option-for-single-file
							#      https://bugzilla.samba.org/show_bug.cgi?id=8594
							if [ -f "$BAK_SRCE_PATH" ]; then
								# as rsync creates a new file (inode), 
								#      then the purpose of the ln is to create a target for rsync to minimize data transfer??
								[ -e "$BAK_LINK_PATH" ] && ln "$BAK_LINK_PATH"                        "$BAK_DEST_PATH"
								rsync -av                                            "$BAK_SRCE_PATH" "$BAK_DEST_PATH"
							else
								# if use "$PTN" and PTN is blank, 
								#   rsync interprets the ("") as a period (.), and copies from current directory as well.
								#   http://askubuntu.com/questions/112717/rsync-copies-files-from-working-directory-in-addition-to-the-requested-ones
								rsync -avx        --link-dest="$BAK_LINK_PATH" $PTN "$BAK_SRCE_PATH" "$BAK_DEST_PATH"
							fi
							[ $? -gt 0 ] && echo "WARNING: error occured"
						else
							echo "WARNING: Bad destination, skipping."
						fi
				else
					echo "WARNING: source doesn't exist, skipping."
				fi
                COUNTER=$(($COUNTER+1))
        fi
done

# == PRUNE OLD BACKUPS =========================================== #
# prune (old) backup IF free space is low AND -gt BAK_KEEP_MIN
# main (only?) reason for running again is to provide a warning, that, in effect, the next backup will fail
pruneIfSpaceLow 'after: '

# == UPDATE SYMLINKS ============================================= #
if ! rm -f "$BAK_DIR/previous" 2>/dev/null; then
	echo "WARNING: Cannot remove '$BAK_DIR/previous' symlink."
fi
if [ -e "$BAK_DIR/latest" ]; then
	if ! mv "$BAK_DIR/latest" "$BAK_DIR/previous" 2>/dev/null; then
		echo "WARNING: Cannot update '$BAK_DIR/previous symlink."
	fi
fi
if ! ln -fs "$TIME_STAMP" "$BAK_DIR/latest" >/dev/null; then
	echo "ERROR: Cannot update '$BAK_DIR/latest' symlink."
	exit 1
fi

# update user/log
echo "INFO: Backup complete"
